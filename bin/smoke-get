#! /usr/bin/env bash

## author: torstein, torstein@skybert.net

set -o errexit
set -o nounset
set -o pipefail

sg_interval_in_seconds=2
sg_output=gnuplot
sg_gnuplot_data_file=/tmp/smoke.txt

sg__is_output_gnuplot() {
  [[ "${sg_output}" == "gnuplot" ]]
}

sg__read_user_input() {
  local opts=
  opts=$(getopt \
           -o ho:nv \
           --long help \
           --long output: \
           --long dry-run \
           --long verbose \
           -n 'parse-options' \
           -- "$@")
  if [ $? != 0 ] ; then
    echo "Failed parsing options." >&2
    exit 1
  fi
  eval set -- "$opts"

  while true; do
    case "$1" in
      -h | --help)
        print_help;
        exit 0
        break;;
      -o | --output)
        export sg_output=$2
        shift 2;;
      -n | --dry-run)
        export dry_run=1
        shift;;
      -v | --verbose)
        export verbose=1
        shift;;
      -- )
        shift;
        break ;;
      * )
        break ;;
    esac
  done

  export sg_uri=$*
}

sg__register_down() {
  if sg__is_output_gnuplot; then
    printf "%s\\n" "$(date +%Y-%m-%d-%H:%M:%S) 0" >> "${sg_gnuplot_data_file}"
  else
    echo -n E
  fi
}

sg__register_up() {
  if sg__is_output_gnuplot; then
    printf "%s\\n" "$(date +%Y-%m-%d-%H:%M:%S) 1" >> "${sg_gnuplot_data_file}"
  else
    echo -n .
  fi
}

sg__get_smoke_from_uri() {
  local _uri=$1

  curl --silent --fail --output /dev/null "${_uri}" || {
    sg__register_down "${_uri}"
    return
  }
  sg__register_up "${_uri}"
}

sg__should_follow() {
  true
}


main() {
  sg__read_user_input "$@"
  while true; do
    sg__get_smoke_from_uri "${sg_uri}"
    sleep "${sg_interval_in_seconds}"
  done
}

main "$@"
